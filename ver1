function simulate_4ASK_system(bitStream, blockSizeBits, saveFile)
% Mo phong he thong dieu che 4-ASK cho chuoi bit rat lon
% bitStream: chuoi bit 0/1 (vector cot)
% blockSizeBits: so bit cho moi block (de giam RAM)
% saveFile: file .mat de luu modulatedSignal

    if nargin < 3
        saveFile = 'modulated_signal.mat';
    end

    % Cac thong so
    bitsPerSymbol = 2;
    samplesPerSymbol = 100; % Oversample factor (neu can)
    numBits = length(bitStream);
    numSymbols = ceil(numBits / bitsPerSymbol);

    % Pre-allocate file storage
    modulatedSignal = [];

    idx = 1;
    blockIdx = 0;

    while idx <= numBits
        blockIdx = blockIdx + 1;
        % Chia ra 1 block
        endIdx = min(idx + blockSizeBits - 1, numBits);
        bitBlock = bitStream(idx:endIdx);

        % Bo sung neu block le so bit
        if mod(length(bitBlock),2) ~= 0
            bitBlock = [bitBlock; 0];
        end

        % Map bitBlock thanh symbolBlock (4-ASK)
        symbolBlock = bits_to_symbols(bitBlock);

        % Ghi noi tiep vao modulatedSignal
        modulatedSignal = [modulatedSignal; symbolBlock];

        disp(['Dang xu ly block #', num2str(blockIdx), ', tu bit ', num2str(idx), ' den ', num2str(endIdx)]);

        idx = endIdx + 1;
    end

    % Luu ket qua
    save(saveFile, 'modulatedSignal', '-v7.3');
    disp(['Da luu file modulatedSignal vao ', saveFile]);
end

function symbols = bits_to_symbols(bits)
    % Chuyen 2 bits -> 1 symbol 4-ASK
    bits = reshape(bits, 2, []).';
    symbolMapping = [-3, -1, 3, 1]/sqrt(5); % 00->-3, 01->-1, 10->3, 11->1
    idx = bits(:,1)*2 + bits(:,2) + 1;
    symbols = symbolMapping(idx);
end
